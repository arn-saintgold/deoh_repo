lin_col = "#0f0f0f"
perc_plot<-perc_plot[order(`Toxicity Level`)]%>%
mutate(Emotion = fct_relevel(Emotion, emotions%>%str_to_title))#%>%
#mutate(`Toxicity Level` = fct_relevel(`Toxicity Level`,t_levels ))
#ttl <- paste0('p(E | T, R)')
ttl <- TeX("$P(e_c | t_c, l_c, \\sum_{e \\in E} e_c > 0) $")
ttl <- TeX("$P(\\textit{e}_c | \\textit{t}_c, \\textit{l}_c, \\sum_{\\textit{e} \\in E} \\textit{e}_c > 0) $")
perc_plot$`Toxicity Level`[perc_plot$`Toxicity Level`=='0. appropriato'] = 'Appropriate'
perc_plot$`Toxicity Level`[perc_plot$`Toxicity Level`=='1. inappropriato'] = 'Inappropriate'
perc_plot$`Toxicity Level`[perc_plot$`Toxicity Level`=='2. offensivo'] = 'Offensive'
perc_plot$`Toxicity Level`[perc_plot$`Toxicity Level`=='3. violento'] = 'Violent'
alpha_values = c('Appropriate' = 0.25, 'Inappropriate' = .5, 'Offensive' = .75, 'Violent' = 1 )
tox_barchart <- perc_plot%>%
ggplot(aes(y=Percentage, x = fct_relevel(Emotion, emotions%>%str_to_title()), fill = fct_relevel(Emotion, emotions%>%str_to_title()),pattern = Is_questionable, group = Is_questionable) )+
geom_bar_pattern(aes(),fill='white',position=position_dodge2(width=1),linewidth=.5,stat="identity",
width = 1,
#position = position_dodge(preserve = "single"),
color = 'black',
pattern_fill = 'black',
pattern_angle = 45,
pattern_density = 0.03,
pattern_spacing = 0.05,
pattern_key_scale_factor = 0.6) +
geom_bar_pattern(aes(alpha = `Toxicity Level`),position=position_dodge2(width=1),linewidth=.5,stat="identity",
#position = position_dodge(preserve = "single"),
width = 1,
color = 'black',
pattern_fill = 'black',
pattern_angle = 45,
pattern_density = 0.03,
pattern_spacing = 0.05,
pattern_key_scale_factor = 0.6) +
scale_fill_manual(values = alpha(emo_colors_darker))+
scale_color_manual(values = emo_colors_darker)+
scale_alpha_manual(values = alpha_values)+
geom_path(aes(), color = lin_col, position=position_dodge2(width=1), linewidth = .75, stat="identity")+
geom_point(aes(),color = lin_col, position=position_dodge2(width=1), size = 4, stat="identity", show.legend = F)+
geom_point(aes (), color='white', position=position_dodge2(width=1), size = 2, stat="identity",show.legend = F)+
geom_point(aes(color = fct_relevel(Emotion, emotions%>%str_to_title()), alpha = `Toxicity Level` ), position=position_dodge2(width=1), size = 2, stat="identity",show.legend = F)+
lemon::facet_rep_wrap(.~Emotion, nrow = 2, scales="free_x", strip.position = "top",  )+
labs(fill = "Toxicity Levels", x = "Emotion", y = ttl)+
scale_y_continuous(labels = scales::percent, limits = c(0,.7),breaks = c(0,.2,.4),minor_breaks = seq(0, .4, .1))+#, expand = c(0,0)
scale_x_discrete(position = 'top')+
#scale_alpha_discrete(range = c(.1, .3, .6, 1))+
#scale_color_manual(values = tox_palette)+
scale_pattern_manual(values = c(Questionable = "stripe", Reliable = "none")) +
#labs(x = "Class", y = "Number of Students", pattern = "Reliability") +
guides(
color = "none", fill = "none",
pattern = guide_legend(title="Reliability: ",override.aes = list(fill = "white", color='black')),
alpha = guide_legend(title="Toxicity Levels: ",override.aes = list(pattern = "none", color='black'))
#fill = guide_legend(title="Toxicity: ",override.aes = list(pattern = "none", color='black'))
)+
theme_minimal()+
xlab('')+
#theme_ipsum_pub()+
theme(text=element_text(size=textsize),
legend.position = 'bottom',
axis.text.x=element_blank(),
legend.box = 'horizontal',
axis.text.y = element_text(colour = 'black',margin = margin(r = 0)) ,
strip.background = element_rect(color = 'black'),#element_rect(color = "black", linewidth = 1),
#strip.background = element_rect(color='black', linewidth=.5),
#panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.grid.major.x = element_blank(),
#plot.background = elementalist::element_rect_round(color = 'black')
#,axis.ticks.x=element_blank()
)
tox_barchart
}
}
much_color <- visualize_tox_perc5(textsize = 16)
much_color
## This function allows us to specify which facet to annotate
annotation_custom2 <- function (grob, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf, data)
{
layer(data = data, stat = StatIdentity, position = PositionIdentity,
geom = ggplot2:::GeomCustomAnn,
inherit.aes = F, params = list(grob = grob,
xmin = xmin, xmax = xmax,
ymin = ymin, ymax = ymax))
}
setDT(pie_data)
pie_data[,Emotion := factor(Emotion, levels = str_to_title(emotions))]
insets <- pie_data %>%
split(f = .$Emotion)%>%
purrr::map(~annotation_custom2(
grob = ggplotGrob(get_pie_emo_from_df(., text_size = 4)),# +
#scale_y_continuous(limits=c(0,105), breaks = c(0, 50, 100))),
data = data.frame(Emotion=unique(.$Emotion)),
ymin = .41, ymax=.74)
)
#reordered_insets <- list(insets$Trust, insets$Joy, insets$Anticipation, insets$Surprise, insets$Fear, insets$Sadness, insets$Anger, insets$Disgust)
#names(insets) = emotions%>%str_to_title()
much_color +
theme(panel.spacing = unit(0, "lines"),
#panel.background = element_rect(fill=NA, color = 'black'),
strip.background = element_rect(fill=NA, color = 'black', linewidth = 1))+
geom_hline(yintercept=.42, ,
color = "black", linewidth=.5)+
insets
#reordered_insets <- list(insets$Trust, insets$Joy, insets$Anticipation, insets$Surprise, insets$Fear, insets$Sadness, insets$Anger, insets$Disgust)
#names(insets) = emotions%>%str_to_title()
final_plot <- much_color +
theme(panel.spacing = unit(0, "lines"),
#panel.background = element_rect(fill=NA, color = 'black'),
strip.background = element_rect(fill=NA, color = 'black', linewidth = 1))+
geom_hline(yintercept=.42, ,
color = "black", linewidth=.5)+
insets
final_plot
?ggsave
## GRAPHICS GLOBAL VARIABLES
WIDTH = 13.03
HEIGHT = 7.82
plot_path
plot_path = file.path(plot_dir,'emo_signal_distribution', 'test.pdf' )
ggsave(plot_path, plot=final_plot, device = 'pdf', width = WIDTH, height = HEIGHT, units = 'in', dpi = 600, )
emotions <- c("trust", "joy", "anticipation", "surprise", "fear", "sadness", "anger", "disgust" )
visualize_tox_perc5 <- function (q = 'none', textsize = 20){
emotions <- c("trust", "joy", "anticipation", "surprise", "fear", "sadness", "anger", "disgust" )
if (q == 'none'){
emo_data <- emo_csv
perc_plot <- emo_data[emotiveness>0 & Is_questionable == "Reliable", .(perc=colSums(.SD)/.N, emo=names(.SD)), by=Label, .SDcols = paste0('has_',emotions)]
perc_plot[, emo :=str_remove(emo,'has_')%>%str_to_title()]
names(perc_plot) <- c('Toxicity Level', 'Percentage', 'Emotion')
perc_plot[, Is_questionable :="Reliable"]
perc_plot2 <- emo_data[emotiveness>0 & Is_questionable != "Reliable", .(perc=colSums(.SD)/.N, emo=names(.SD)), by=Label, .SDcols = paste0('has_',emotions)]
perc_plot2[, emo :=str_remove(emo,'has_')%>%str_to_title()]
names(perc_plot2) <- c('Toxicity Level', 'Percentage', 'Emotion')
perc_plot2[, Is_questionable :="Questionable"]
perc_plot <- rbind(perc_plot, perc_plot2)
t_levels<-emo_data[, unique(Label)]%>%sort()
lin_col = "#0f0f0f"
perc_plot<-perc_plot[order(`Toxicity Level`)]%>%
mutate(Emotion = fct_relevel(Emotion, emotions%>%str_to_title))#%>%
#mutate(`Toxicity Level` = fct_relevel(`Toxicity Level`,t_levels ))
#ttl <- paste0('p(E | T, R)')
ttl <- TeX("$P(e_c | t_c, l_c, \\sum_{e \\in E} e_c > 0) $")
ttl <- TeX("$P(\\textit{e}_c | \\textit{t}_c, \\textit{l}_c, \\sum_{\\textit{e} \\in E} \\textit{e}_c > 0) $")
perc_plot$`Toxicity Level`[perc_plot$`Toxicity Level`=='0. appropriato'] = 'Appropriate'
perc_plot$`Toxicity Level`[perc_plot$`Toxicity Level`=='1. inappropriato'] = 'Inappropriate'
perc_plot$`Toxicity Level`[perc_plot$`Toxicity Level`=='2. offensivo'] = 'Offensive'
perc_plot$`Toxicity Level`[perc_plot$`Toxicity Level`=='3. violento'] = 'Violent'
alpha_values = c('Appropriate' = 0.25, 'Inappropriate' = .5, 'Offensive' = .75, 'Violent' = 1 )
tox_barchart <- perc_plot%>%
ggplot(aes(y=Percentage, x = fct_relevel(Emotion, emotions%>%str_to_title()), fill = fct_relevel(Emotion, emotions%>%str_to_title()),pattern = Is_questionable, group = Is_questionable) )+
geom_bar_pattern(aes(),fill='white',position=position_dodge2(width=1),linewidth=.5,stat="identity",
width = 1,
#position = position_dodge(preserve = "single"),
color = 'black',
pattern_fill = 'black',
pattern_angle = 45,
pattern_density = 0.03,
pattern_spacing = 0.05,
pattern_key_scale_factor = 0.6) +
geom_bar_pattern(aes(alpha = `Toxicity Level`),position=position_dodge2(width=1),linewidth=.5,stat="identity",
#position = position_dodge(preserve = "single"),
width = 1,
color = 'black',
pattern_fill = 'black',
pattern_angle = 45,
pattern_density = 0.03,
pattern_spacing = 0.05,
pattern_key_scale_factor = 0.6) +
scale_fill_manual(values = alpha(emo_colors_darker))+
scale_color_manual(values = emo_colors_darker)+
scale_alpha_manual(values = alpha_values)+
geom_path(aes(), color = lin_col, position=position_dodge2(width=1), linewidth = .75, stat="identity")+
geom_point(aes(),color = lin_col, position=position_dodge2(width=1), size = 4, stat="identity", show.legend = F)+
geom_point(aes (), color='white', position=position_dodge2(width=1), size = 2, stat="identity",show.legend = F)+
geom_point(aes(color = fct_relevel(Emotion, emotions%>%str_to_title()), alpha = `Toxicity Level` ), position=position_dodge2(width=1), size = 2, stat="identity",show.legend = F)+
lemon::facet_rep_wrap(.~Emotion, nrow = 2, scales="free_x", strip.position = "top",  )+
labs(fill = "Toxicity Levels", x = "Emotion", y = ttl)+
scale_y_continuous(labels = scales::percent, limits = c(0,.7),breaks = c(0,.2,.4),minor_breaks = seq(0, .4, .1))+#, expand = c(0,0)
scale_x_discrete(position = 'top')+
#scale_alpha_discrete(range = c(.1, .3, .6, 1))+
#scale_color_manual(values = tox_palette)+
scale_pattern_manual(values = c(Questionable = "stripe", Reliable = "none")) +
#labs(x = "Class", y = "Number of Students", pattern = "Reliability") +
guides(
color = "none", fill = "none",
pattern = guide_legend(title="Reliability: ",override.aes = list(fill = "white", color='black')),
alpha = guide_legend(title="Toxicity Levels: ",override.aes = list(pattern = "none", color='black'))
#fill = guide_legend(title="Toxicity: ",override.aes = list(pattern = "none", color='black'))
)+
theme_minimal()+
xlab('')+
#theme_ipsum_pub()+
theme(text=element_text(size=textsize),
legend.position = 'bottom',
axis.text.x=element_blank(),
legend.box = 'horizontal',
axis.text.y = element_text(colour = 'black',margin = margin(r = 0)) ,
strip.background = element_rect(color = 'black'),#element_rect(color = "black", linewidth = 1),
#strip.background = element_rect(color='black', linewidth=.5),
#panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.grid.major.x = element_blank(),
#plot.background = elementalist::element_rect_round(color = 'black')
#,axis.ticks.x=element_blank()
)
tox_barchart
}
}
much_color <- visualize_tox_perc5(textsize = 16)
much_color
## This function allows us to specify which facet to annotate
annotation_custom2 <- function (grob, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf, data)
{
layer(data = data, stat = StatIdentity, position = PositionIdentity,
geom = ggplot2:::GeomCustomAnn,
inherit.aes = F, params = list(grob = grob,
xmin = xmin, xmax = xmax,
ymin = ymin, ymax = ymax))
}
setDT(pie_data)
pie_data[,Emotion := factor(Emotion, levels = str_to_title(emotions))]
insets <- pie_data %>%
split(f = .$Emotion)%>%
purrr::map(~annotation_custom2(
grob = ggplotGrob(get_pie_emo_from_df(., text_size = 4)),# +
#scale_y_continuous(limits=c(0,105), breaks = c(0, 50, 100))),
data = data.frame(Emotion=unique(.$Emotion)),
ymin = .41, ymax=.74)
)
#reordered_insets <- list(insets$Trust, insets$Joy, insets$Anticipation, insets$Surprise, insets$Fear, insets$Sadness, insets$Anger, insets$Disgust)
#names(insets) = emotions%>%str_to_title()
final_plot <- much_color +
theme(panel.spacing = unit(0, "lines"),
#panel.background = element_rect(fill=NA, color = 'black'),
strip.background = element_rect(fill=NA, color = 'black', linewidth = 1))+
geom_hline(yintercept=.42,
color = "black", linewidth=.5)+
insets
ggsave(plot_path, plot=final_plot, device = 'pdf', width = WIDTH, height = HEIGHT, units = 'in', dpi = 600, )
emo_csv
test
rm(test)
test <- fread('../../emo_csv_statistics.gz')
test <- fread('../../../emo_csv_statistics.gz')
test <- fread('../../../../emo_csv_statistics.gz')
test <- fread('../emo_csv_statistics.gz')
test
emo_csv
test[n_emotions>0,.N]
emo_csv[n_emotions>0,.N]
test <- fread('../from_server.emo_toxic/emo_csv_statistics.gz')
test[n_emotions>0,.N]
test[has_trust==T,]
test[has_trust==T,.N]
emo_csv[has_trust==T,.N]
library(lemon)
scales
library(purrr)
# data wrangling
library(tidyverse)
library(data.table)
# statistical tests
library(rcompanion)
# graphics packages
library(ggplot2)
library(ggpattern)
library(ggrepel)
library(RColorBrewer)
library(scales)
library(latex2exp)
library(lemon)
library(elementalist)
# DIRECTORIES
data_dir = file.path('data', 'processed')
plot_dir = file.path('output')
emo_csv_path = file.path(data_dir, 'emo_csv_statistics.gz')
# GLOBAL VARIABLES
emotions = c("anger", "trust", "surprise", "disgust", "joy", "sadness", "fear", "anticipation")
## GRAPHICS GLOBAL VARIABLES
WIDTH = 13.03
HEIGHT = 7.82
emo_colors = c('Trust' = '#b4c690','Joy' = '#ffea7f', 'Anticipation' = '#ffc57f', 'Surprise' = '#c2e6f4', 'Fear' = '#90c490', 'Sadness' = '#8ec7ff', 'Anger' = '#ffa17f', 'Disgust' = '#b4ace5')
emo_colors_darker = c('Trust' = '#8fa95e','Joy' = '#ffdf3b', 'Anticipation' = '#ff9f3a', 'Surprise' = '#9dd6ee', 'Fear' = '#67aa67', 'Sadness' = '#44a3ff', 'Anger' = '#ff6e48', 'Disgust' = '#7d70d2')
emo_csv <- fread(emo_csv_path)
setDT(emo_csv)
# bin_questionable is the integer version of is_questionable
emo_csv[, bin_questionable := is_questionable*1]
# assign lean to users using their Nome_Utente
# lean is #is_questionable/#comments
leanings <- emo_csv[, .(leaning = sum(bin_questionable)/.N),by = Nome_Utente  ]
leanings[, is_questionable := (leaning > 0.25 )]
# set to NA every leaning between .75 and .25
leanings = leanings[leaning<0.75 & leaning >0.25, is_questionable := NA]
#setkey(emo_csv, Nome_Utente)
setkey(leanings, Nome_Utente)
toxicity <- emo_csv[,unique(Label)]
# add variable has_emotion = #comments with emotion/#comments
usr_emo <- emo_csv[, .(has_anger = sum(has_anger)/.N,
has_anticipation = sum(has_anticipation)/.N,
has_disgust = sum(has_disgust)/.N,
has_fear = sum(has_fear)/.N,
has_joy = sum(has_joy)/.N,
has_sadness = sum(has_sadness)/.N,
has_surprise = sum(has_surprise)/.N,
has_trust = sum(has_trust)/.N,
n_comments = .N,
n_words = sum(stringr::str_count(Testo ,"\\W+") ),
len_text = sum(length(Testo)),
appropriate = sum(Label == toxicity[1])/.N,
inappropriate = sum(Label == toxicity[2])/.N,
offensive = sum(Label == toxicity[3])/.N,
violent = sum(Label == toxicity[4])/.N
), by = Nome_Utente ]
setkey(usr_emo, Nome_Utente)
# merge emotion and leanings
usr_emo_lean <- merge(usr_emo, leanings)
setnames(usr_emo_lean, paste0("has_", emotions), emotions)
setorder(usr_emo_lean, Nome_Utente)
names(usr_emo_lean)
head(usr_emo_lean)
usr_emo_lean[, id := row_number(Nome_Utente)]
usr_emo_lean[, Nome_Utente:=NULL]
usr_emo_lean[, n_emo := rowSums(.SD > 0), .SDcols = emotions]
fwrite(usr_emo_lean, file.path(data_dir,"usr_emo_lean.gz"),
logical01 = T,
compress = "gzip",
na = "NA" )
usr_emo_lean_path = file.path(data_dir, 'usr_emo_lean.gz')
usr_emo_lean = fread(usr_emo_lean_path)
usr_emo_lean_v0 <- fread('../from_server.multishap_results/usr_emo_lean.csv.gz')
usr_emo_lean%>%names()
n_unique(usr_emo_lean[,id])
nunique(usr_emo_lean[,id])
unique(usr_emo_lean[,id])
unique(usr_emo_lean[,id])%>%length()
usr_emo_lean[,.N]
i = 678
A = usr_emo_lean_v0[id == i]
B = usr_emo_lean[id == i]
A != B
A
B
names(usr_emo_lean)
usr_emo_lean[1]
usr_emo_lean_v0[1]
length(usr_emo_lean)
dim(usr_emo_lean)
1:dim(usr_emo_lean)[1]
A = usr_emo_lean_v0[i]
B = usr_emo_lean[i]
A != B
A
B
A = usr_emo_lean_v0[i]%>%select(-id)
B = usr_emo_lean[i]%>%select(-id)
A != B
equals()
typeof(A)
identical(A,B)
!identical(A,B)
for (i in 1:dim(usr_emo_lean)[1]){
A = usr_emo_lean_v0[i]%>%select(-id)
B = usr_emo_lean[i]%>%select(-id)
if (!identical(A,B)){
print('whoops: ',i)
break
}
print('all ok')
}
for (i in 1:dim(usr_emo_lean)[1]){
A = usr_emo_lean_v0[i]%>%select(-id)
B = usr_emo_lean[i]%>%select(-id)
if (!identical(A,B)){
print('whoops: ',i)
break
}
}
library(parallel)
library(doParallel)
finalMatrix <- foreach(i=1:dim(usr_emo_lean)[1], .combine=cbind) %dopar% {
A = usr_emo_lean_v0[i]%>%select(-id)
B = usr_emo_lean[i]%>%select(-id)
!identical(A,B)
}
cores=detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
finalMatrix <- foreach(i=1:dim(usr_emo_lean)[1], .combine=cbind) %dopar% {
A = usr_emo_lean_v0[i]%>%select(-id)
B = usr_emo_lean[i]%>%select(-id)
!identical(A,B)
}
#stop cluster
stopCluster(cl)
sum(finalMatrix)
dim(usr_emo_lean)[1]
i=100000//100
i=100000/100
i
100000%%100
100000%%1000
100000%%10000
100000%%1000
for (i in 1:dim(usr_emo_lean)[1]){
A = usr_emo_lean_v0[i]%>%select(-id)
B = usr_emo_lean[i]%>%select(-id)
if (i%%1000==0)
message(i)
if (!identical(A,B)){
message('whoops: ',i)
break
}
}
if (!identical(A,B)){
message('whoops: ',i)
break
}
print('all ok')
for (i in 1:dim(usr_emo_lean)[1]){
A = usr_emo_lean_v0[i]%>%select(-id)
B = usr_emo_lean[i]%>%select(-id)
if (i%%1000==0)
message(i*100/dim(usr_emo_lean)[1]%>%round(digits=2))
if (!identical(A,B)){
message('whoops: ',i)
break
}
}
round(2.12345, digits=2)
for (i in 1:dim(usr_emo_lean)[1]){
A = usr_emo_lean_v0[i]%>%select(-id)
B = usr_emo_lean[i]%>%select(-id)
if (i%%1000==0)
message(round(i*100/dim(usr_emo_lean)[1],digits=2))
if (!identical(A,B)){
message('whoops: ',i)
break
}
}
for (i in 1:dim(usr_emo_lean)[1]){
A = usr_emo_lean_v0[i]%>%select(-id)
B = usr_emo_lean[i]%>%select(-id)
if (i%%1000==0)
message(round(i*100/dim(usr_emo_lean)[1],digits=2),'%')
if (!identical(A,B)){
message('whoops: ',i)
break
}
}
print('all ok')
source('packages_n_global_variables.R')
source('packages_n_global_variables.R')
emo_csv <- fread(emo_csv_path)
my_pivot = emo_csv[,.(N = .N), by=.(Is_questionable, Label)]
dcast(my_pivot, Label ~ Is_questionable, value.var = c("N") )%>%xtable()
data<- dcast(my_pivot, Label ~ Is_questionable , value.var = c("N") )
data
# Compute percentages
data[, Qfraction := Questionable/sum(Questionable)]
data[, Rfraction := Reliable/sum(Reliable)]
# Compute the cumulative percentages (top of each rectangle)
data[,Qymax := cumsum(Qfraction)]
data[,Rymax := cumsum(Rfraction)]
# Compute the bottom of each rectangle
data[, Qymin:= c(0, head(Qymax, n=-1))]#$ymin = c(0, head(data$ymax, n=-1))
data[, Rymin:= c(0, head(Rymax, n=-1))]
# Compute label position
data[, QlabelPosition:=(Qymax + Qymin) / 2 ]
data[, RlabelPosition:=(Rymax + Rymin) / 2 ]
# Compute a good label
data[, Qlabel:= paste0(100*round(Qfraction, 4), "%" )]
data[, Rlabel:= paste0(100*round(Rfraction, 4), "%" )]
# Make the plot
ggplot(data, aes(ymax=Qymax, ymin=Qymin, xmax=4, xmin=3, fill=Label)) +
geom_rect() +
geom_text( x=2, aes(y=QlabelPosition, label=Qlabel, color=Label), size=3.2,fontface = "bold") + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
labs(title= "Questionable Comments distribution")+
theme(legend.position = "right")
ggplot(data, aes(ymax=Rymax, ymin=Rymin, xmax=4, xmin=3, fill=Label)) +
geom_rect() +
geom_text( x=2, aes(y=RlabelPosition, label=Rlabel, color=Label), size=3.2,fontface = "bold") + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
labs(title= "Reliable Comments distribution")+
theme(legend.position = "right")
# Make the plots
ggplot(data, aes(ymax=Qymax, ymin=Qymin, xmax=4, xmin=3, fill=Label)) +
geom_rect() +
geom_text( x=2, aes(y=QlabelPosition, label=Qlabel, color=Label), size=3.2,fontface = "bold") + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
labs(title= "Questionable Comments distribution")+
theme(legend.position = "right")
ggsave(file.path(plot_dir,'q_commenets_dist.png'), height = HEIGHT, width = WIDTH, units = 'in')
ggplot(data, aes(ymax=Rymax, ymin=Rymin, xmax=4, xmin=3, fill=Label)) +
geom_rect() +
geom_text( x=2, aes(y=RlabelPosition, label=Rlabel, color=Label), size=3.2,fontface = "bold") + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
labs(title= "Reliable Comments distribution")+
theme(legend.position = "right")
ggsave(file.path(plot_dir,'r_commenets_dist.png'), height = HEIGHT, width = WIDTH, units = 'in')
